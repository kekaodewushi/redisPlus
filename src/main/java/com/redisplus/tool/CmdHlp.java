package com.redisplus.tool;

import java.util.HashMap;

public final class CmdHlp {
    public enum CmdTo {
        Any, All, One
    }

    public static class Info {
        String name;
        String params;
        String summary;
        CmdTo to;

        public String getName() {
            return name;
        }

//        public String getParams() {
//            return params;
//        }

        public String getSummary() {
            return summary;
        }

        public CmdTo getCmdTo() {
            return to;
        }

        private Info(String name, String params, String summary, CmdTo to) {
            this.name = name;
            this.params = params;
            this.summary = summary;
            this.to = to;
        }
    }

    private static HashMap<String, Info> hlpHash_ = new HashMap<>();
    public static Info getHlpInfo(String name) {
        if (hlpHash_.isEmpty()) {
            init();
        }
        return hlpHash_.get(name.toUpperCase());
    }

    private static synchronized void init() {
        if (hlpHash_.isEmpty()) {
            for (Info i : commandHelp) {
                hlpHash_.put(i.name, i);
            }
        }
    }

    private final static Info commandHelp[] = {
        new Info( "APPEND",
                "key value",
                "Append a value to a key",
                CmdTo.One),
        new Info("AUTH",
                "password",
                "Authenticate to the server",
                CmdTo.All),
        new Info("BGREWRITEAOF",
                "-",
                "Asynchronously rewrite the append-only file",
                CmdTo.All),
        new Info("BGSAVE",
                "-",
                "Asynchronously save the dataset to disk",
                CmdTo.All),
        new Info("BITCOUNT",
                "key [start end]",
                "Count set bits in a string",
                CmdTo.One),
        new Info("BITFIELD",
                "key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]",
                "Perform arbitrary bitfield integer operations on strings",
                CmdTo.One),
//        new Info("BITOP",
//                "operation destkey key [key ...]",
//                "Perform bitwise operations between strings",
//                1,
//                "2.6.0"),
        new Info("BITPOS",
                "key bit [start] [end]",
                "Find first bit set or clear in a string",
                CmdTo.One),
//        new Info("BLPOP",
//                "key [key ...] timeout",
//                "Remove and get the first element in a list, or block until one is available",
//                2,
//                "2.0.0"),
//        new Info("BRPOP",
//                "key [key ...] timeout",
//                "Remove and get the last element in a list, or block until one is available",
//                2,
//                "2.0.0"),
//        new Info("BRPOPLPUSH",
//                "source destination timeout",
//                "Pop a value from a list, push it to another list and return it; or block until one is available",
//                2,
//                "2.2.0"),
//        new Info("CLIENT GETNAME",
//                "-",
//                "Get the current connection name",
//                9,
//                "2.6.9"),
//        new Info("CLIENT KILL",
//                "[ip:port] [ID client-id] [TYPE normal|master|slave|pubsub] [ADDR ip:port] [SKIPME yes/no]",
//                "Kill the connection of a client",
//                9,
//                "2.4.0"),
//        new Info("CLIENT LIST",
//                "-",
//                "Get the list of client connections",
//                9,
//                "2.4.0"),
//        new Info("CLIENT PAUSE",
//                "timeout",
//                "Stop processing commands from clients for some time",
//                9,
//                "2.9.50"),
//        new Info("CLIENT REPLY",
//                "ON|OFF|SKIP",
//                "Instruct the server whether to reply to commands",
//                9,
//                "3.2"),
//        new Info("CLIENT SETNAME",
//                "connection-name",
//                "Set the current connection name",
//                9,
//                "2.6.9"),
//        new Info("CLUSTER ADDSLOTS",
//                "slot [slot ...]",
//                "Assign new hash slots to receiving node",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER COUNT-FAILURE-REPORTS",
//                "node-id",
//                "Return the number of failure reports active for a given node",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER COUNTKEYSINSLOT",
//                "slot",
//                "Return the number of local keys in the specified hash slot",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER DELSLOTS",
//                "slot [slot ...]",
//                "Set hash slots as unbound in receiving node",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER FAILOVER",
//                "[FORCE|TAKEOVER]",
//                "Forces a slave to perform a manual failover of its master.",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER FORGET",
//                "node-id",
//                "Remove a node from the nodes table",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER GETKEYSINSLOT",
//                "slot count",
//                "Return local key names in the specified hash slot",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER INFO",
//                "-",
//                "Provides info about Redis Cluster node state",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER KEYSLOT",
//                "key",
//                "Returns the hash slot of the specified key",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER MEET",
//                "ip port",
//                "Force a node cluster to handshake with another node",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER NODES",
//                "-",
//                "Get Cluster config for the node",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER REPLICATE",
//                "node-id",
//                "Reconfigure a node as a slave of the specified master node",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER RESET",
//                "[HARD|SOFT]",
//                "Reset a Redis Cluster node",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER SAVECONFIG",
//                "-",
//                "Forces the node to save cluster state on disk",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER SET-CONFIG-EPOCH",
//                "config-epoch",
//                "Set the configuration epoch in a new node",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER SETSLOT",
//                "slot IMPORTING|MIGRATING|STABLE|NODE [node-id]",
//                "Bind a hash slot to a specific node",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER SLAVES",
//                "node-id",
//                "List slave nodes of the specified master node",
//                12,
//                "3.0.0"),
//        new Info("CLUSTER SLOTS",
//                "-",
//                "Get array of Cluster slot to node mappings",
//                12,
//                "3.0.0"),
        new Info("COMMAND",
                "-",
                "Get array of Redis command details",
                CmdTo.Any),
        new Info("COMMAND COUNT",
                "-",
                "Get total number of Redis commands",
                CmdTo.Any),
        new Info("COMMAND GETKEYS",
                "-",
                "Extract keys given a full Redis command",
                CmdTo.Any),
        new Info("COMMAND INFO",
                "command-name [command-name ...]",
                "Get array of specific Redis command details",
                CmdTo.Any),
        new Info("CONFIG GET",
                "parameter",
                "Get the value of a configuration parameter",
                CmdTo.All),
        new Info("CONFIG RESETSTAT",
                "-",
                "Reset the stats returned by INFO",
                CmdTo.All),
        new Info("CONFIG REWRITE",
                "-",
                "Rewrite the configuration file with the in memory configuration",
                CmdTo.All),
        new Info("CONFIG SET",
                "parameter value",
                "Set a configuration parameter to the given value",
                CmdTo.All),
        new Info("DBSIZE",
                "-",
                "Return the number of keys in the selected database",
                CmdTo.All),
//        new Info("DEBUG OBJECT",
//                "key",
//                "Get debugging information about a key",
//                CmdTo.One),
//        new Info("DEBUG SEGFAULT",
//                "-",
//                "Make the server crash",
//                9,
//                "1.0.0"),
        new Info("DECR",
                "key",
                "Decrement the integer value of a key by one",
                CmdTo.One),
        new Info("DECRBY",
                "key decrement",
                "Decrement the integer value of a key by the given number",
                CmdTo.One),
        new Info("DEL",
                "key [key ...]",
                "Delete a key",
                CmdTo.One),
//        new Info("DISCARD",
//                "-",
//                "Discard all commands issued after MULTI",
//                7,
//                "2.0.0"),
        new Info("DUMP",
                "key",
                "Return a serialized version of the value stored at the specified key.",
                CmdTo.One),
        new Info("ECHO",
                "message",
                "Echo the given string",
                CmdTo.All),
//        new Info("EVAL",
//                "script numkeys key [key ...] arg [arg ...]",
//                "Execute a Lua script server side",
//                10,
//                "2.6.0"),
//        new Info("EVALSHA",
//                "sha1 numkeys key [key ...] arg [arg ...]",
//                "Execute a Lua script server side",
//                10,
//                "2.6.0"),
//        new Info("EXEC",
//                "-",
//                "Execute all commands issued after MULTI",
//                7,
//                "1.2.0"),
        new Info("EXISTS",
                "key [key ...]",
                "Determine if a key exists",
                CmdTo.One),
        new Info("EXPIRE",
                "key seconds",
                "Set a key's time to live in seconds",
                CmdTo.One),
        new Info("EXPIREAT",
                "key timestamp",
                "Set the expiration for a key as a UNIX timestamp",
                CmdTo.One),
//        new Info("FLUSHALL",
//                "-",
//                "Remove all keys from all databases",
//                9,
//                "1.0.0"),
//        new Info("FLUSHDB",
//                "-",
//                "Remove all keys from the current database",
//                CmdTo.All),
//        new Info("GEOADD",
//                "key longitude latitude member [longitude latitude member ...]",
//                "Add one or more geospatial items in the geospatial index represented using a sorted set",
//                13,
//                "3.2.0"),
//        new Info("GEODIST",
//                "key member1 member2 [unit]",
//                "Returns the distance between two members of a geospatial index",
//                13,
//                "3.2.0"),
//        new Info("GEOHASH",
//                "key member [member ...]",
//                "Returns members of a geospatial index as standard geohash strings",
//                13,
//                "3.2.0"),
//        new Info("GEOPOS",
//                "key member [member ...]",
//                "Returns longitude and latitude of members of a geospatial index",
//                13,
//                "3.2.0"),
//        new Info("GEORADIUS",
//                "key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]",
//                "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point",
//                13,
//                "3.2.0"),
//        new Info("GEORADIUSBYMEMBER",
//                "key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]",
//                "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member",
//                13,
//                "3.2.0"),
        new Info("GET",
                "key",
                "Get the value of a key",
                CmdTo.One),
        new Info("GETBIT",
                "key offset",
                "Returns the bit value at offset in the string value stored at key",
                CmdTo.One),
        new Info("GETRANGE",
                "key start end",
                "Get a substring of the string stored at a key",
                CmdTo.One),
        new Info("GETSET",
                "key value",
                "Set the string value of a key and return its old value",
                CmdTo.One),
        new Info("HDEL",
                "key field [field ...]",
                "Delete one or more hash fields",
                CmdTo.One),
        new Info("HEXISTS",
                "key field",
                "Determine if a hash field exists",
                CmdTo.One),
        new Info("HGET",
                "key field",
                "Get the value of a hash field",
                CmdTo.One),
        new Info("HGETALL",
                "key",
                "Get all the fields and values in a hash",
                CmdTo.One),
        new Info("HINCRBY",
                "key field increment",
                "Increment the integer value of a hash field by the given number",
                CmdTo.One),
        new Info("HINCRBYFLOAT",
                "key field increment",
                "Increment the float value of a hash field by the given amount",
                CmdTo.One),
        new Info("HKEYS",
                "key",
                "Get all the fields in a hash",
                CmdTo.One),
        new Info("HLEN",
                "key",
                "Get the number of fields in a hash",
                CmdTo.One),
        new Info("HMGET",
                "key field [field ...]",
                "Get the values of all the given hash fields",
                CmdTo.One),
        new Info("HMSET",
                "key field value [field value ...]",
                "Set multiple hash fields to multiple values",
                CmdTo.One),
        new Info("HSCAN",
                "key cursor [MATCH pattern] [COUNT count]",
                "Incrementally iterate hash fields and associated values",
                CmdTo.One),
        new Info("HSET",
                "key field value",
                "Set the string value of a hash field",
                CmdTo.One),
        new Info("HSETNX",
                "key field value",
                "Set the value of a hash field, only if the field does not exist",
                CmdTo.One),
        new Info("HSTRLEN",
                "key field",
                "Get the length of the value of a hash field",
                CmdTo.One),
        new Info("HVALS",
                "key",
                "Get all the values in a hash",
                CmdTo.One),
        new Info("INCR",
                "key",
                "Increment the integer value of a key by one",
                CmdTo.One),
        new Info("INCRBY",
                "key increment",
                "Increment the integer value of a key by the given amount",
                CmdTo.One),
        new Info("INCRBYFLOAT",
                "key increment",
                "Increment the float value of a key by the given amount",
                CmdTo.One),
        new Info("INFO",
                "[section]",
                "Get information and statistics about the server",
                CmdTo.All),
//        new Info("KEYS",
//                "pattern",
//                "Find all keys matching the given pattern",
//                0,
//                "1.0.0"),
        new Info("LASTSAVE",
                "-",
                "Get the UNIX time stamp of the last successful save to disk",
                CmdTo.All),
        new Info("LINDEX",
                "key index",
                "Get an element from a list by its index",
                CmdTo.One),
        new Info("LINSERT",
                "key BEFORE|AFTER pivot value",
                "Insert an element before or after another element in a list",
                CmdTo.One),
        new Info("LLEN",
                "key",
                "Get the length of a list",
                CmdTo.One),
        new Info("LPOP",
                "key",
                "Remove and get the first element in a list",
                CmdTo.One),
        new Info("LPUSH",
                "key value [value ...]",
                "Prepend one or multiple values to a list",
                CmdTo.One),
        new Info("LPUSHX",
                "key value",
                "Prepend a value to a list, only if the list exists",
                CmdTo.One),
        new Info("LRANGE",
                "key start stop",
                "Get a range of elements from a list",
                CmdTo.One),
        new Info("LREM",
                "key count value",
                "Remove elements from a list",
                CmdTo.One),
        new Info("LSET",
                "key index value",
                "Set the value of an element in a list by its index",
                CmdTo.One),
        new Info("LTRIM",
                "key start stop",
                "Trim a list to the specified range",
                CmdTo.One),
//        new Info("MGET",
//                "key [key ...]",
//                "Get the values of all the given keys",
//                1,
//                "1.0.0"),
//        new Info({ "MIGRATE",
//                "host port key|"" destination-db timeout [COPY] [REPLACE] [KEYS key]",
//                "Atomically transfer a key from a Redis instance to another one.",
//                0,
//                "2.6.0"),
//        new Info("MONITOR",
//                "-",
//                "Listen for all requests received by the server in real time",
//                9,
//                "1.0.0"),
//        new Info("MOVE",
//                "key db",
//                "Move a key to another database",
//                0,
//                "1.0.0"),
//        new Info("MSET",
//                "key value [key value ...]",
//                "Set multiple keys to multiple values",
//                1,
//                "1.0.1"),
//        new Info("MSETNX",
//                "key value [key value ...]",
//                "Set multiple keys to multiple values, only if none of the keys exist",
//                1,
//                "1.0.1"),
//        new Info("MULTI",
//                "-",
//                "Mark the start of a transaction block",
//                7,
//                "1.2.0"),
//        new Info("OBJECT",
//                "subcommand [arguments [arguments ...]]",
//                "Inspect the internals of Redis objects",
//                0,
//                "2.2.3"),
        new Info("PERSIST",
                "key",
                "Remove the expiration from a key",
                CmdTo.One),
        new Info("PEXPIRE",
                "key milliseconds",
                "Set a key's time to live in milliseconds",
                CmdTo.One),
        new Info("PEXPIREAT",
                "key milliseconds-timestamp",
                "Set the expiration for a key as a UNIX timestamp specified in milliseconds",
                CmdTo.One),
//        new Info("PFADD",
//                "key element [element ...]",
//                "Adds the specified elements to the specified HyperLogLog.",
//                11,
//                "2.8.9"),
//        new Info("PFCOUNT",
//                "key [key ...]",
//                "Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",
//                11,
//                "2.8.9"),
//        new Info("PFMERGE",
//                "destkey sourcekey [sourcekey ...]",
//                "Merge N different HyperLogLogs into a single one.",
//                11,
//                "2.8.9"),
        new Info("PING",
                "[message]",
                "Ping the server",
                CmdTo.All),
        new Info("PSETEX",
                "key milliseconds value",
                "Set the value and expiration in milliseconds of a key",
                CmdTo.One),
//        new Info("PSUBSCRIBE",
//                "pattern [pattern ...]",
//                "Listen for messages published to channels matching the given patterns",
//                6,
//                "2.0.0"),
        new Info("PTTL",
                "key",
                "Get the time to live for a key in milliseconds",
                CmdTo.One),
//        new Info("PUBLISH",
//                "channel message",
//                "Post a message to a channel",
//                6,
//                "2.0.0"),
//        new Info("PUBSUB",
//                "subcommand [argument [argument ...]]",
//                "Inspect the state of the Pub/Sub subsystem",
//                6,
//                "2.8.0"),
//        new Info("PUNSUBSCRIBE",
//                "[pattern [pattern ...]]",
//                "Stop listening for messages posted to channels matching the given patterns",
//                6,
//                "2.0.0"),
//        new Info("QUIT",
//                "-",
//                "Close the connection",
//                8,
//                "1.0.0"),
//        new Info("RANDOMKEY",
//                "-",
//                "Return a random key from the keyspace",
//                0,
//                "1.0.0"),
//        new Info("READONLY",
//                "-",
//                "Enables read queries for a connection to a cluster slave node",
//                12,
//                "3.0.0"),
//        new Info("READWRITE",
//                "-",
//                "Disables read queries for a connection to a cluster slave node",
//                12,
//                "3.0.0"),
//        new Info("RENAME",
//                "key newkey",
//                "Rename a key",
//                0,
//                "1.0.0"),
//        new Info("RENAMENX",
//                "key newkey",
//                "Rename a key, only if the new key does not exist",
//                0,
//                "1.0.0"),
        new Info("RESTORE",
                "key ttl serialized-value [REPLACE]",
                "Create a key using the provided serialized value, previously obtained using DUMP.",
                CmdTo.One),
//        new Info("ROLE",
//                "-",
//                "Return the role of the instance in the context of replication",
//                CmdTo.Any),
        new Info("RPOP",
                "key",
                "Remove and get the last element in a list",
                CmdTo.One),
//        new Info("RPOPLPUSH",
//                "source destination",
//                "Remove the last element in a list, prepend it to another list and return it",
//                2,
//                "1.2.0"),
        new Info("RPUSH",
                "key value [value ...]",
                "Append one or multiple values to a list",
                CmdTo.One),
        new Info("RPUSHX",
                "key value",
                "Append a value to a list, only if the list exists",
                CmdTo.One),
        new Info("SADD",
                "key member [member ...]",
                "Add one or more members to a set",
                CmdTo.One),
        new Info("SAVE",
                "-",
                "Synchronously save the dataset to disk",
                CmdTo.All),
//        new Info("SCAN",
//                "cursor [MATCH pattern] [COUNT count]",
//                "Incrementally iterate the keys space",
//                0,
//                "2.8.0"),
    /*  下面四个是自定义的命令    */
        new Info("SEARCHPATH",
                "start with what",
                "Return the path and the number of keys in the path ",
                CmdTo.All),
        new Info("KEYSINPATH",
                "path",
                "Return all keys in the path",
                CmdTo.All),
        new Info("DELPATH",
                "path",
                "Delete all keys in the path",
                CmdTo.All),
        new Info("LDEL",
                "key element [element ...]",
                "Delete one or more list elements",
                CmdTo.One),

        new Info("SCARD",
                "key",
                "Get the number of members in a set",
                CmdTo.One),
//        new Info("SCRIPT DEBUG",
//                "YES|SYNC|NO",
//                "Set the debug mode for executed scripts.",
//                10,
//                "3.2.0"),
//        new Info("SCRIPT EXISTS",
//                "script [script ...]",
//                "Check existence of scripts in the script cache.",
//                10,
//                "2.6.0"),
//        new Info("SCRIPT FLUSH",
//                "-",
//                "Remove all the scripts from the script cache.",
//                10,
//                "2.6.0"),
//        new Info("SCRIPT KILL",
//                "-",
//                "Kill the script currently in execution.",
//                10,
//                "2.6.0"),
//        new Info("SCRIPT LOAD",
//                "script",
//                "Load the specified Lua script into the script cache.",
//                10,
//                "2.6.0"),
//        new Info("SDIFF",
//                "key [key ...]",
//                "Subtract multiple sets",
//                3,
//                "1.0.0"),
//        new Info("SDIFFSTORE",
//                "destination key [key ...]",
//                "Subtract multiple sets and store the resulting set in a key",
//                3,
//                "1.0.0"),
//        new Info("SELECT",
//                "index",
//                "Change the selected database for the current connection",
//                8,
//                "1.0.0"),
        new Info("SET",
                "key value [EX seconds] [PX milliseconds] [NX|XX]",
                "Set the string value of a key",
                CmdTo.One),
        new Info("SETBIT",
                "key offset value",
                "Sets or clears the bit at offset in the string value stored at key",
                CmdTo.One),
        new Info("SETEX",
                "key seconds value",
                "Set the value and expiration of a key",
                CmdTo.One),
        new Info("SETNX",
                "key value",
                "Set the value of a key, only if the key does not exist",
                CmdTo.One),
        new Info("SETRANGE",
                "key offset value",
                "Overwrite part of a string at key starting at the specified offset",
                CmdTo.One),
//        new Info("SHUTDOWN",
//                "[NOSAVE|SAVE]",
//                "Synchronously save the dataset to disk and then shut down the server",
//                CmdTo.All),
//        new Info("SINTER",
//                "key [key ...]",
//                "Intersect multiple sets",
//                3,
//                "1.0.0"),
//        new Info("SINTERSTORE",
//                "destination key [key ...]",
//                "Intersect multiple sets and store the resulting set in a key",
//                3,
//                "1.0.0"),
        new Info("SISMEMBER",
                "key member",
                "Determine if a given value is a member of a set",
                CmdTo.One),
//        new Info("SLAVEOF",
//                "host port",
//                "Make the server a slave of another instance, or promote it as master",
//                9,
//                "1.0.0"),
//        new Info("SLOWLOG",
//                "subcommand [argument]",
//                "Manages the Redis slow queries log",
//                9,
//                "2.2.12"),
        new Info("SMEMBERS",
                "key",
                "Get all the members in a set",
                CmdTo.One),
//        new Info("SMOVE",
//                "source destination member",
//                "Move a member from one set to another",
//                3,
//                "1.0.0"),
        new Info("SORT",
                "key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]",
                "Sort the elements in a list, set or sorted set",
                CmdTo.One),
        new Info("SPOP",
                "key [count]",
                "Remove and return one or multiple random members from a set",
                CmdTo.One),
        new Info("SRANDMEMBER",
                "key [count]",
                "Get one or multiple random members from a set",
                CmdTo.One),
        new Info("SREM",
                "key member [member ...]",
                "Remove one or more members from a set",
                CmdTo.One),
        new Info("SSCAN",
                "key cursor [MATCH pattern] [COUNT count]",
                "Incrementally iterate Set elements",
                CmdTo.One),
        new Info("STRLEN",
                "key",
                "Get the length of the value stored in a key",
                CmdTo.One),
//        new Info("SUBSCRIBE",
//                "channel [channel ...]",
//                "Listen for messages published to the given channels",
//                6,
//                "2.0.0"),
//        new Info("SUNION",
//                "key [key ...]",
//                "Add multiple sets",
//                3,
//                "1.0.0"),
//        new Info("SUNIONSTORE",
//                "destination key [key ...]",
//                "Add multiple sets and store the resulting set in a key",
//                3,
//                "1.0.0"),
//        new Info("SYNC",
//                "-",
//                "Internal command used for replication",
//                9,
//                "1.0.0"),
        new Info("TIME",
                "-",
                "Return the current server time",
                CmdTo.All),
        new Info("TTL",
                "key",
                "Get the time to live for a key",
                CmdTo.One),
        new Info("TYPE",
                "key",
                "Determine the type stored at key",
                CmdTo.One),
//        new Info("UNSUBSCRIBE",
//                "[channel [channel ...]]",
//                "Stop listening for messages posted to the given channels",
//                6,
//                "2.0.0"),
//        new Info("UNWATCH",
//                "-",
//                "Forget about all watched keys",
//                7,
//                "2.2.0"),
//        new Info("WAIT",
//                "numslaves timeout",
//                "Wait for the synchronous replication of all the write commands sent in the context of the current connection",
//                0,
//                "3.0.0"),
//        new Info("WATCH",
//                "key [key ...]",
//                "Watch the given keys to determine execution of the MULTI/EXEC block",
//                7,
//                "2.2.0"),
        new Info("ZADD",
                "key [NX|XX] [CH] [INCR] score member [score member ...]",
                "Add one or more members to a sorted set, or update its score if it already exists",
                CmdTo.One),
        new Info("ZCARD",
                "key",
                "Get the number of members in a sorted set",
                CmdTo.One),
        new Info("ZCOUNT",
                "key min max",
                "Count the members in a sorted set with scores within the given values",
                CmdTo.One),
        new Info("ZINCRBY",
                "key increment member",
                "Increment the score of a member in a sorted set",
                CmdTo.One),
//        new Info("ZINTERSTORE",
//                "destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]",
//                "Intersect multiple sorted sets and store the resulting sorted set in a new key",
//                4,
//                "2.0.0"),
        new Info("ZLEXCOUNT",
                "key min max",
                "Count the number of members in a sorted set between a given lexicographical range",
                CmdTo.One),
        new Info("ZRANGE",
                "key start stop [WITHSCORES]",
                "Return a range of members in a sorted set, by index",
                CmdTo.One),
        new Info("ZRANGEBYLEX",
                "key min max [LIMIT offset count]",
                "Return a range of members in a sorted set, by lexicographical range",
                CmdTo.One),
        new Info("ZRANGEBYSCORE",
                "key min max [WITHSCORES] [LIMIT offset count]",
                "Return a range of members in a sorted set, by score",
                CmdTo.One),
        new Info("ZRANK",
                "key member",
                "Determine the index of a member in a sorted set",
                CmdTo.One),
        new Info("ZREM",
                "key member [member ...]",
                "Remove one or more members from a sorted set",
                CmdTo.One),
        new Info("ZREMRANGEBYLEX",
                "key min max",
                "Remove all members in a sorted set between the given lexicographical range",
                CmdTo.One),
        new Info("ZREMRANGEBYRANK",
                "key start stop",
                "Remove all members in a sorted set within the given indexes",
                CmdTo.One),
        new Info("ZREMRANGEBYSCORE",
                "key min max",
                "Remove all members in a sorted set within the given scores",
                CmdTo.One),
        new Info("ZREVRANGE",
                "key start stop [WITHSCORES]",
                "Return a range of members in a sorted set, by index, with scores ordered from high to low",
                CmdTo.One),
        new Info("ZREVRANGEBYLEX",
                "key max min [LIMIT offset count]",
                "Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.",
                CmdTo.One),
        new Info("ZREVRANGEBYSCORE",
                "key max min [WITHSCORES] [LIMIT offset count]",
                "Return a range of members in a sorted set, by score, with scores ordered from high to low",
                CmdTo.One),
        new Info("ZREVRANK",
                "key member",
                "Determine the index of a member in a sorted set, with scores ordered from high to low",
                CmdTo.One),
        new Info("ZSCAN",
                "key cursor [MATCH pattern] [COUNT count]",
                "Incrementally iterate sorted sets elements and associated scores",
                CmdTo.One),
        new Info("ZSCORE",
                "key member",
                "Get the score associated with the given member in a sorted set",
                CmdTo.One) //,
//        new Info("ZUNIONSTORE",
//                "destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]",
//                "Add multiple sorted sets and store the resulting sorted set in a new key",
//                4,
//                "2.0.0")
    };
}
